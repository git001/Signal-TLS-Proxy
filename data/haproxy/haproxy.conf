#
global

  log stdout format raw daemon

#  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  daemon

  tune.ssl.default-dh-param 2048

  # Default SSL material locations
  #ca-base /etc/ssl/certs
  #crt-base /etc/ssl/private

  # TextSecure / Open Whisper Systems uses there own CA.
  # Is there a Download url where the CA could be downloaded to verify the CA?
  # http://cbonte.github.io/haproxy-dconv/2.3/configuration.html#ssl-server-verify
  ssl-server-verify none

  # See https://ssl-config.mozilla.org/#server=haproxy&version=2.1&config=old&openssl=1.1.1d&guideline=5.4
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options no-sslv3 no-tls-tickets

  ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA
  ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-server-options no-sslv3 no-tls-tickets


defaults tcp
  log   global
  mode	tcp
  retry-on all-retryable-errors
  option ssl-hello-chk
  option log-health-checks
  option socket-stats
  timeout connect 5s
  timeout client  50s
  timeout server  50s


resolvers mydns
  nameserver systemd-resolver 127.0.0.53:53
  parse-resolv-conf
  resolve_retries       3
  timeout resolve       1s
  timeout retry         1s
  hold other           30s
  hold refused         30s
  hold nx              30s
  hold timeout         30s
  hold valid           10s
  hold obsolete        30s


# copied from https://serversforhackers.com/c/letsencrypt-with-haproxy
# The frontend only listens on port 80
# If it detects a LetsEncrypt request, is uses the LE backend
# Else it goes to the default backend for the web servers
frontend http
    bind *:8081
    mode http

    # Test URI to see if its a letsencrypt request
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl

    default_backend default


frontend https
  bind *:4431

  log global

  use_backend %[req.hdr(host),lower,map(data/haproxy/signal-destinations.map,default)]

backend signal-service 
  log global

  server textsecure textsecure-service.whispersystems.org:443 resolvers mydns ssl check

backend storage-service
  log global

  server storage storage.signal.org:443 resolvers mydns ssl check

 backend signal-cdn
   log global
 
   server cdn cdn.signal.org:443 resolvers mydns ssl check
 
 backend signal-cdn2
   log global
 
   server cdn2 cdn2.signal.org:443 resolvers mydns ssl check
 
 backend directory
   log global
 
   server api api.directory.signal.org:443 resolvers mydns ssl check
 
 backend content-proxy
   log global
 
   server contentproxy contentproxy.signal.org:443 resolvers mydns ssl check
 
 backend uptime
   log global
 
   server uptime uptime.signal.org:443 resolvers mydns ssl check
 
 backend backup
   log global
 
   server api api.backup.signal.org:443 resolvers mydns ssl check
 
 backend sfu
   log global
 
   server sfu sfu.voip.signal.org:443 resolvers mydns ssl check
 
 backend updates
   log global
 
   server updates updates.signal.org:443 resolvers mydns ssl check
 
 backend updates2
   log global
 
   server updates2 updates2.signal.org:443 resolvers mydns ssl check
 
# used to send a deny to the clients
backend default

  mode http
  log global

  http-response deny deny_status 404 content-type application/json string '{"code":404,"message":"HTTP 404 Not Found"}' 

# LE Backend
backend letsencrypt-backend
  mode http
  server letsencrypt 127.0.0.1:8888
